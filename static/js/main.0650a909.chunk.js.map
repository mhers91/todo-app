{"version":3,"sources":["logo.svg","TodoBanner.js","TodoCreator.js","TodoRow.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoBanner","render","className","props","name","tasks","filter","t","done","length","Component","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","callback","state","onChange","onClick","TodoRow","item","action","type","checked","VisibilityControl","isChecked","e","description","App","task","todoItems","find","localStorage","setItem","JSON","stringify","toggleTodo","todo","map","todoTableRows","doneValue","key","componentDidMount","data","getItem","parse","userName","showCompleted","changeStateData","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0650a909.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\r\n\r\nexport class TodoBanner extends Component {\r\n  render = () => (\r\n    <h4 className='bg-primary text-white text-center p-2'>\r\n      {this.props.name}'s To Do List (\r\n      {this.props.tasks.filter(t => !t.done).length} items to do)\r\n    </h4>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class TodoCreator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { newItemText: \"\" };\r\n  }\r\n\r\n  updateNewTextValue = event => {\r\n    this.setState({ newItemText: event.target.value });\r\n  };\r\n\r\n  createNewTodo = () => {\r\n    this.props.callback(this.state.newItemText);\r\n    this.setState({ newItemText: \"\" });\r\n  };\r\n\r\n  render = () => (\r\n    <div className='my-1'>\r\n      <input\r\n        className='form-control'\r\n        value={this.state.newItemText}\r\n        onChange={this.updateNewTextValue}\r\n      />\r\n      <button className='btn btn-primary mt-1' onClick={this.createNewTodo}>\r\n        Add\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class TodoRow extends Component {\r\n  render = () => (\r\n    <tr>\r\n      <td>{this.props.item.action}</td>\r\n      <td>\r\n        <input\r\n          type='checkbox'\r\n          checked={this.props.item.done}\r\n          onChange={() => this.props.callback(this.props.item)}\r\n        />\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class VisibilityControl extends Component {\r\n  render = () => (\r\n    <div className='form-check'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        checked={this.props.isChecked}\r\n        onChange={e => this.props.callback(e.target.checked)}\r\n      />\r\n      <label className='form-check-label'>Show {this.props.description}</label>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TodoBanner } from \"./TodoBanner\";\nimport { TodoCreator } from \"./TodoCreator\";\nimport { TodoRow } from \"./TodoRow\";\nimport { VisibilityControl } from \"./VisibilityControl\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"Mike\",\n      todoItems: [\n        { action: \"Buy Flowers\", done: false },\n        { action: \"Get Shoes\", done: false },\n        { action: \"Collect Tickets\", done: true },\n        { action: \"Call Joe\", done: false }\n      ],\n      showCompleted: true\n    };\n  }\n\n  updateNewTextValue = event => {\n    this.setState({ newItemText: event.target.value });\n  };\n\n  createNewTodo = task => {\n    if (!this.state.todoItems.find(item => item.action === task)) {\n      this.setState(\n        {\n          todoItems: [...this.state.todoItems, { action: task, done: false }]\n        },\n        () => localStorage.setItem(\"todos\", JSON.stringify(this.state))\n      );\n    }\n  };\n\n  toggleTodo = todo =>\n    this.setState({\n      todoItems: this.state.todoItems.map(item =>\n        item.action === todo.action ? { ...item, done: !item.done } : item\n      )\n    });\n\n  todoTableRows = doneValue =>\n    this.state.todoItems\n      .filter(item => item.done === doneValue)\n      .map(item => (\n        <TodoRow key={item.action} item={item} callback={this.toggleTodo} />\n      ));\n\n  componentDidMount = () => {\n    let data = localStorage.getItem(\"todos\");\n    this.setState(\n      data != null\n        ? JSON.parse(data)\n        : {\n            userName: \"Mike\",\n            todoItems: [\n              { action: \"Buy Flowers\", done: false },\n              { action: \"Get Shoes\", done: false },\n              { action: \"Collect Tickets\", done: true },\n              { action: \"Call Joe\", done: false }\n            ],\n            showCompleted: true\n          }\n    );\n  };\n\n  changeStateData = () => {\n    this.setState({\n      userName: this.state.userName === \"Mike\" ? \"Bob\" : \"Mike\"\n    });\n  };\n\n  render = () => (\n    <div>\n      <TodoBanner name={this.state.userName} tasks={this.state.todoItems} />\n      <div className='container-fluid'>\n        <TodoCreator callback={this.createNewTodo} />\n        <table className='table table-striped table-bordered'>\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Done</th>\n            </tr>\n          </thead>\n          <tbody>{this.todoTableRows(false)}</tbody>\n        </table>\n        <div className='bg-secondary text-white text-center p-2'>\n          <VisibilityControl\n            description='Completed Tasks'\n            isChecked={this.state.showCompleted}\n            callback={checked => this.setState({ showCompleted: checked })}\n          />\n        </div>\n\n        {this.state.showCompleted && (\n          <table className='table table-striped table-bordered'>\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>{this.todoTableRows(true)}</tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}